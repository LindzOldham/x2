import pyfits as py, numpy as np, pylab as pl
import indexTricks as iT
from scipy import ndimage

''' part one: Poisson noise '''
sci = py.open('SDSSJ1606+2235_F606W_sci.fits')[0].data.copy()
wht = py.open('SDSSJ1606+2235_F606W_wht.fits')[0].data.copy()


cut1 = sci[2040:2080,2170:2210]
cut2 = sci[2040:2120,2130:2210]
cut3 = sci[2180:2250,2200:2280]
cut4 = sci[1850:1925,2345:2420]

wht1 = wht[2040:2080,2170:2210]
wht2 = wht[2040:2120,2130:2210]
wht3 = wht[2180:2250,2200:2280]
wht4 = wht[1850:1925,2345:2420]

counts1 = cut1*wht1
var1 = np.var(counts1)/np.median(wht1)**2.

counts2 = cut2*wht2
var2 = np.var(counts2)/np.median(wht2)**2.

counts3 = cut3*wht3
var3 = np.var(counts3)/np.median(wht3)**2.

counts4 = cut4*wht4
var4 = np.var(counts4)/np.median(wht4)**2.

poisson = np.mean((var1,var2,var3,var4))


''' part two: noise from the object '''

def clip(arr,nsig=4.5):
    a = np.sort(arr.ravel())
    a = a[a.size*0.001:a.size*0.999]
    while 1:
        m,s,l = a.mean(),a.std(),a.size
        a = a[abs(a-m)<nsig*s]
        if a.size==l:
            return m,s


im = py.open('/data/ljo31/Lens/SDSSJ1606+2235_F606W_sci_cutout.fits')[0].data
wht = py.open('/data/ljo31/Lens/SDSSJ1606+2235_F606W_wht_cutout.fits')[0].data

m,s = clip(im)
bg = ndimage.median_filter(im,31)
res = im-bg
mask = np.where(res-m>2*s)

var = np.var(im[mask])
noise = im*0 + poisson
noise[mask] = var/wht[mask]
data = np.var(im[mask]) / wht[mask]

py.writeto('/data/ljo31/Lens/SDSSJ1606+2235_F606W_noise_cutout.fits',data,clobber=True)

def ClippedVar(array):
    return array[np.isfinite(array)].var()


#d[fullmask] = np.nan
#d[~fullmask] = d[~fullmask]
#out = ndimage.filters.generic_filter(im,ClippedVar,21)

# or is it just counts?
noise = im*0
noise[mask] = im[mask]/wht[mask]
noise = noise + poisson
noise[noise>0.005] =poisson
py.writeto('/data/ljo31/Lens/SDSSJ1606+2235_F606W_noise_cutout.fits',noise,clobber=True)

pl.figure()
pl.imshow(np.log10(noise),interpolation='nearest',origin='lower')


## I band

''' part one: Poisson noise '''
sci = py.open('SDSSJ1606+2235_F814W_sci.fits')[0].data.copy()
wht = py.open('SDSSJ1606+2235_F814W_wht.fits')[0].data.copy()


cut1 = sci[2040:2080,2170:2210]
cut2 = sci[2040:2120,2130:2210]
cut3 = sci[2180:2250,2200:2280]
cut4 = sci[1850:1925,2345:2420]

wht1 = wht[2040:2080,2170:2210]
wht2 = wht[2040:2120,2130:2210]
wht3 = wht[2180:2250,2200:2280]
wht4 = wht[1850:1925,2345:2420]

counts1 = cut1*wht1
var1 = np.var(counts1)/np.median(wht1)**2.

counts2 = cut2*wht2
var2 = np.var(counts2)/np.median(wht2)**2.

counts3 = cut3*wht3
var3 = np.var(counts3)/np.median(wht3)**2.

counts4 = cut4*wht4
var4 = np.var(counts4)/np.median(wht4)**2.

poisson = np.mean((var1,var2,var3,var4))


''' part two: noise from the object '''


im = py.open('/data/ljo31/Lens/SDSSJ1606+2235_F814W_sci_cutout.fits')[0].data
wht = py.open('/data/ljo31/Lens/SDSSJ1606+2235_F814W_wht_cutout.fits')[0].data

m,s = clip(im)
bg = ndimage.median_filter(im,31)
res = im-bg
mask = np.where(res-m>2*s)

var = np.var(im[mask])
noise = im*0 + poisson
noise[mask] = var/wht[mask]
data = np.var(im[mask]) / wht[mask]

py.writeto('/data/ljo31/Lens/SDSSJ1606+2235_F814W_noise_cutout.fits',data,clobber=True)

def ClippedVar(array):
    return array[np.isfinite(array)].var()


#d[fullmask] = np.nan
#d[~fullmask] = d[~fullmask]
#out = ndimage.filters.generic_filter(im,ClippedVar,21)

# or is it just counts?
noise2 = im*0
noise2[mask] = im[mask]/wht[mask]
noise2 = noise2 + poisson
noise2[noise2>0.005] =poisson
py.writeto('/data/ljo31/Lens/SDSSJ1606+2235_F814W_noise_cutout.fits',noise2,clobber=True)

pl.figure()
pl.imshow(np.log10(noise2),interpolation='nearest',origin='lower')

print np.where(noise-noise2>0)


## trying a new sort of noise map

im = py.open('/data/ljo31/Lens/SDSSJ1606+2235_F814W_sci_cutout.fits')[0].data
wht = py.open('/data/ljo31/Lens/SDSSJ1606+2235_F814W_wht_cutout.fits')[0].data
from scipy import ndimage
res = ndimage.filters.gaussian_filter(im*wht,sigma=2)

noise = 10**1.5
sn = np.where(res/noise > 7)
im2 = im*0.
im2[sn] = im[sn]
poisson = 0.0001445
im2 = im2/100. + np.sqrt(poisson)
res2 = ndimage.filters.minimum_filter(im2,5)

pl.figure()
pl.imshow(res2)
pl.colorbar()

py.writeto('/data/ljo31/Lens/SDSSJ1606+2235_F814W_noise4_cutout.fits',res2,clobber=True)


im = py.open('/data/ljo31/Lens/SDSSJ1606+2235_F606W_sci_cutout.fits')[0].data
wht = py.open('/data/ljo31/Lens/SDSSJ1606+2235_F606W_wht_cutout.fits')[0].data
from scipy import ndimage
res = ndimage.filters.gaussian_filter(im*wht,sigma=2)

noise = 10**1.5
sn = np.where(res/noise > 7)
im2 = im*0.
im2[sn] = im[sn]
poisson = 0.0001445
im2 = im2/100. + 2.*np.sqrt(poisson)
res2 = ndimage.filters.minimum_filter(im2,5)

pl.figure()
pl.imshow(res2)
pl.colorbar()

py.writeto('/data/ljo31/Lens/SDSSJ1606+2235_F606W_noise4_cutout.fits',res2,clobber=True)



def ClippedVar(array):
    return array[np.isfinite(array)].var()

im = py.open('/data/ljo31/Lens/SDSSJ1606+2235_F606W_sci_cutout.fits')[0].data
wht = py.open('/data/ljo31/Lens/SDSSJ1606+2235_F606W_wht_cutout.fits')[0].data

counts = im*wht
out = ndimage.filters.generic_filter(counts,ClippedVar,5)
pl.figure()
pl.imshow(out/wht,origin='lower',interpolation='nearest')

#d[fullmask] = np.nan
#d[~fullmask] = d[~fullmask]
#out = ndimage.filters.generic_filter(im,ClippedVar,21)


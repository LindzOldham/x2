import pyfits as py, numpy as np, pylab as pl
import indexTricks as iT
from scipy import ndimage

''' part one: Poisson noise '''
sci = py.open('/data/ljo31/Lens/J1605/SDSSJ1605+3811_F555W_sci.fits')[0].data.copy()
wht = py.open('/data/ljo31/Lens/J1605/SDSSJ1605+3811_F555W_wht.fits')[0].data.copy()


cut1 = sci[2190:2215,2200:2225]
cut2 = sci[2115:2140,2160:2180]
cut3 = sci[2200:2225,2330:2360]

wht1 = wht[2190:2215,2200:2225]
wht2 = wht[2115:2140,2160:2180]
wht3 = wht[2200:2225,2330:2360]

counts1 = cut1*wht1
var1 = np.var(counts1)/np.median(wht1)**2.

counts2 = cut2*wht2
var2 = np.var(counts2)/np.median(wht2)**2.

counts3 = cut3*wht3
var3 = np.var(counts3)/np.median(wht3)**2.


poisson_v = np.mean((var1,var2,var3))

sigma = poisson_v**0.5

from scipy import ndimage
im = py.open('/data/ljo31/Lens/J1605/SDSSJ1605*3811_F555W_sci_cutout2.fits')[0].data.copy()
wht = py.open('/data/ljo31/Lens/J1605/SDSSJ1605+3811_F555W_wht_cutout2.fits')[0].data.copy()

smooth = ndimage.gaussian_filter(im,0.7)
noisemap = np.where((smooth>0.7*sigma)&(im>0),im/wht+poisson_v, poisson_v)**0.5
py.writeto('/data/ljo31/Lens/J1605/SDSSJ1605+3811_F555W_noisemap2.fits',noisemap,clobber=True)
pl.figure()
pl.imshow(noisemap)
pl.colorbar()

## I band

''' part one: Poisson noise '''
sci = py.open('/data/ljo31/Lens/J1605/SDSSJ1605+3811_F814W_sci.fits')[0].data.copy()
wht = py.open('/data/ljo31/Lens/J1605/SDSSJ1605+3811_F814W_wht.fits')[0].data.copy()


cut1 = sci[2190:2215,2200:2225]
cut2 = sci[2115:2140,2160:2180]
cut3 = sci[2200:2225,2330:2360]

wht1 = wht[2190:2215,2200:2225]
wht2 = wht[2115:2140,2160:2180]
wht3 = wht[2200:2225,2330:2360]

counts1 = cut1*wht1
var1 = np.var(counts1)/np.median(wht1)**2.

counts2 = cut2*wht2
var2 = np.var(counts2)/np.median(wht2)**2.

counts3 = cut3*wht3
var3 = np.var(counts3)/np.median(wht3)**2.


poisson_i = np.mean((var1,var2,var3))

im = py.open('/data/ljo31/Lens/J1605/SDSSJ1605+3811_F814W_sci_cutout2.fits')[0].data.copy()
wht = py.open('/data/ljo31/Lens/J1605/SDSSJ1605+3811_F814W_wht_cutout2.fits')[0].data.copy()

smooth = ndimage.gaussian_filter(im,0.7)
noisemap = np.where((smooth>0.7*sigma)&(im>0),im/wht+poisson_i, poisson_i)**0.5
py.writeto('/data/ljo31/Lens/J1605/SDSSJ1605+3811_F814W_noisemap2.fits',noisemap,clobber=True)
pl.figure()
pl.imshow(noisemap)
pl.colorbar()
